# Generated by Django 5.1.1 on 2024-09-12 11:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ParkingLot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('gpsLocation', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('ON STREET', 'on-street'), ('OFF STREET', 'off-street'), ('VALET', 'valet'), ('GARAGE', 'garage')], default='ON STREET', max_length=20)),
                ('capacity', models.IntegerField()),
                ('restrictions', models.CharField(choices=[('PERMIT REQUIRED', 'Permit Required'), ('SIZE RESTRICTION', 'Size Restriction'), ('NO RESTRICTION', 'None')], default='NO RESTRICTION', max_length=50)),
                ('security', models.BooleanField(default=False)),
                ('lighting', models.BooleanField(default=False)),
                ('chargingStation', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('price', models.IntegerField()),
                ('discount_rate', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('terms', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ParkingSpace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('space_code', models.CharField(max_length=6, unique=True)),
                ('type', models.CharField(choices=[('REGULAR', 'Regular'), ('HANDICAPPED', 'Handicapped'), ('ELECTRIC', 'Electric Vehicle Charging')], default='REGULAR', max_length=20)),
                ('status', models.BooleanField(default=True)),
                ('parking_lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parking_spaces', to='app.parkinglot')),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.subscription')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ATTENDANTS', 'Attendants'), ('ADMIN', 'Admin')], max_length=50)),
                ('phone_number', models.CharField(max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '07XXXXXXXX'. Up to 10 digits allowed.", regex='^07[8923]\\d{7}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='users', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator(message='Plate number needd to be formated like AAA 000 A', regex='^[A-Z]{3} [0-9]{3} [A-Z]$')])),
                ('entry_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('exit_time', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField()),
                ('payment_status', models.CharField(choices=[('paid', 'Paid'), ('unpaid', 'Unpaid'), ('pending', 'Pending')], default='unpaid', max_length=50)),
                ('parking', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.parkinglot')),
                ('parking_space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.parkingspace')),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.subscription')),
                ('parking_attendee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.user')),
            ],
        ),
        migrations.AddField(
            model_name='parkinglot',
            name='manager_1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_manager', to='app.user'),
        ),
        migrations.AddField(
            model_name='parkinglot',
            name='manager_2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secondary_manager', to='app.user'),
        ),
    ]
